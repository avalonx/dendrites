akka {
#log-config-on-start = on #verbose log of configuration when starting
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
#stdout-loglevel = "DEBUG"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off
  actor {
	debug {
		#receive = on
		#autoreceive = on
		lifecycle = on
		#fsm = on
		#event-stream = on
	}
  }
  test.single-expect-default = 60s
}

http {
  interface = "0.0.0.0"
  port = 9000
}

balancesIP = "0.0.0.0"
balancesIP = ${?BALANCES_IP}
balancesPort = 9000
balancesPort = ${?BALANCES_PORT}
 
dendrites {
	
	version = 0.3.0
	description = "aggregators for Akka Actors, Akka HTTP Restful services, Akka Streams"

	algebird {
		countMinSketch {
			delta = 1E-10
			eps = 0.001
			seed = 1
		}

		decayedValue {
			halfLife = 10.0
			epsilon = 0.001
		}

		hyperLogLog {
			bits = 12
		}

		qTree {
			level = 16
		}
	}

	checking-balances {
		http {
			interface = ${balancesIP}
			port = ${balancesPort}
			path = "/account/balances/checking/"
			requestPath = "GetAccountBalances"
			millis = "3000"
		}
	}
	
	money-market-balances {
		http {
			interface = ${balancesIP}
			port = ${balancesPort}
			path = "/account/balances/mm/"
			requestPath = "GetAccountBalances"
			millis = "3000"
		}
	}
	
	
	savings-balances {
		http {
			interface = ${balancesIP}
			port = ${balancesPort}
			path = "/account/balances/savings/"
			requestPath = "GetAccountBalances"
			millis = "3000"
		}
	}
	
	blocking-dispatcher {
	  executor = "thread-pool-executor"
	  thread-pool-executor {
	    core-pool-size-min    = 10
	    core-pool-size-max    = 10
	  }
	}
	
	kafka {
		account {
		  close-timeout = "10000"
		  key = "GetAccountBalances"
		  min-backoff = 100
		  max-backoff = 30000
		  poll-timeout = "60000"
		  randomFactor = 0.2
		  topic = "account-topic"
		}
	}
	
	cassandra {
		ipAddress = "127.0.0.1"
		ipAddresses = [
			"127.0.0.1"
		]
		keySpace = "simplex"
		replicationStrategy = "SimpleStrategy"
		localDataCenter = "datacenter1"
    }
}